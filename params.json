{"name":"Ratatouille","body":"# Ratatouille \r\n\r\nDSL for validation of complex Hashes\r\n\r\n## Travis CI Status: \r\n[![Build Status](https://secure.travis-ci.org/CITguy/ratatouille.png?branch=master)](http://travis-ci.org/CITguy/ratatouille)\r\n\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'ratatouille'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install ratatouille\r\n\r\n\r\n\r\n## Information\r\n\r\nSpecific uses and syntax can be found in the documentation of each module. The information defined\r\nhere is common information amongst the entirety of the ratatouille gem.\r\n\r\n## Blocks\r\n\r\nAll of the given methods accept a block for validation and will not progress into the block if the core method logic does not validate.\r\nHowever, some methods may be used without a block and validation will progress whether or not the method logic validates.\r\n\r\n\r\n### ratifiable\\_object\r\n\r\nWithin a block, the ratifiable\\_object method provides the object that is to be validated against.\r\nThis will change when using *given\\_key*.\r\n\r\n\r\n### name\r\n\r\nWithin a block, the **name** method provides the name of the scope. \r\nThis can be used in your custom validation messages and is already prepended to the beginning\r\nof every validation error.\r\n\r\n\r\n\r\n## Custom Validation\r\n\r\n**Return to this section after reading the remaining sections.**\r\n\r\nCustom validation can take place using the following methods to generate custom validation logic that cannot be satisfied with the existing methods.\r\n\r\nYou should use the **validation\\_error** method to add your own errors to the Ratifier object.\r\n\r\n\r\n### validation\\_error\r\n\r\nUsed to insert validation error message into the Ratifier object.\r\n\r\n* Scope name prepended to every validation error\r\n\r\n\r\n#### Syntax\r\n\r\nIt is also possible to set the context of an error by passing in a second argument. \r\nHowever, it defaults to the root of the current ratifiable\\_object ('/').\r\n\r\n```ruby\r\n    validation_error(\"This is an error\")\r\n    validation_error(\"This is an error\", \"current_context\")\r\n```\r\n\r\n\r\n\r\n## Universal Options\r\n\r\n### :unwrap\\_block\r\n\r\nThis optional key, when set to true, will skip the wrapped validation provided in the called\r\nmethod and run the validations contained in its given block (if any). This is useful\r\nif previous validation results dictate further validation logic.\r\n\r\n#### Example\r\n\r\n*A choice of :bar or :biz is required only if :foo is 'green', \r\notherwise :bar and :biz should be validated if they are present.*\r\n\r\n```ruby\r\n  ratify({:foo => \"red\"}) do\r\n    required_key(:foo) do\r\n      unwrap_choice = true\r\n      unwrap_choice = false if ratifiable_object == 'green'\r\n    end\r\n\r\n    # Because :foo is 'red', choice_of logic will be ignored and the block will be entered.\r\n    choice_of(:key_list => [:bar, :biz], :unwrap_block => unwrap_choice) do\r\n      given_key(:bar) do\r\n        # :bar validation\r\n      end\r\n      given_key(:biz) do\r\n        # :biz validation\r\n      end\r\n    end\r\n\r\n    # If :foo were 'green', choice_of logic would be performed before entering the block.\r\n  end\r\n```\r\n\r\n\r\n\r\n## Advanced Example\r\n\r\n```ruby\r\n    include Ratatouille\r\n    r = ratify({:foo => {:bar => {:biz => \"bang\"}}}) do\r\n      is_not_empty\r\n      given_key(:foo) do\r\n        validation_error(\":foo error\")\r\n        given_key(:bar) do\r\n          validation_error(\":bar error\")\r\n          given_key(:biz) do\r\n            if ratifiable_object == \"bang\"\r\n              validation_error(\"should be 'shoot'\")\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n    r.valid? # => false\r\n```\r\n\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","tagline":"DSL for validation of complex Hashes","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}